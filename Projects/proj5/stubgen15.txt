==> ProbeHashTable.h <==
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*****************************************
 ** File:    ProbeHashTable.h
 ** Project: CMSC 341 proj5, Spring 2017
 ** Author:  Uzoma Uwanamodo
 ** Date:    05/11/2018
 ** E-mail:  uu3@umbc.edu
 ** 
 ** This file contains the header for the ProbeHashTable class.
 ** 
 ** 
 ** 
 ** 
 *********************************************/

#ifndef PROBEHASHTABLE_H
#define PROBEHASHTABLE_H

#include "HashTable.h"
#include <vector>

using namespace std;

enum {DELETED = -1, EMPTY, OCCUPIED};

template <typename T>
class ProbeHashTable : public HashTable<T> {
public:
    
    class HashTableEntry {
    public:
        int m_flag;
        T m_data;
        
        // Constructor
        HashTableEntry(const T &data);
        
        HashTableEntry();
    };
    
    // default constructor
    ProbeHashTable(unsigned int (*hashFunc)(const T &data), int n = 101);

    // copy constructor
    ProbeHashTable(const ProbeHashTable& other);

    // overloaded assignment operator
    const ProbeHashTable& operator=(const ProbeHashTable& rhs);

    // destructor
    ~ProbeHashTable();


    // Retreive the number of items stored at the index slot of the hash table
    int at(int index, vector<T>& contents);

    // Print out the contents of the dump hashtable
    void dump();

    // Look for data in the hash table
    bool find(const T& data);

    // Insert data into the hashtable
    bool insert(const T& data);

    // Remove data from the hashtable if found
    T remove(const T& data, bool& found);

    // Convience function to look for the item only once
    bool locate(const T& data, int &index);
    
    
//    extern int debug_count;
private:
    HashTableEntry * m_table; // Store the hash chains
    int m_length; // Number of buckets in hashtable
    int m_size; // Number of items in the hashtable
};


#include "ProbeHashTable.cpp"
#endif /* PROBEHASHTABLE_H */


==> ProbeHashTable.cpp <==
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*****************************************
 ** File:    ProbeHashTable.cpp
 ** Project: CMSC 341 proj5, Spring 2018
 ** Author:  Uzoma Uwanamodo
 ** Date:    05/11/2018
 ** E-mail:  uu3@umbc.edu
 ** 
 ** This file contains the definition for the ProbeHashTable class.
 ** 
 ** 
 ** 
 ** 
 *********************************************/

#ifndef PROBEHASHTABLE_CPP
#define PROBEHASHTABLE_CPP


#include <iostream>
#include "ProbeHashTable.h"
#include <stdexcept>

using namespace std;

/*
 *  Method: ProbeHashTable::ProbeHashTable()
 *   Descr: Default constructor for ProbeHashTable
 */
template <typename T>
ProbeHashTable<T>::ProbeHashTable(unsigned int(*hashFunc)(const T&), int n) : m_table(new HashTableEntry[n]), m_length(n), m_size(0) {
    this->hashFunc = hashFunc;

}
 
/*
 *  Method: ProbeHashTable::ProbeHashTable()
 *   Descr: Copy constructor for ProbeHashTable
 */
template <typename T>
ProbeHashTable<T>::ProbeHashTable(const ProbeHashTable<T>& other) {
}

/*
 *  Method: ProbeHashTable::operator=()
 *   Descr: Overloaded assignment operator for ProbeHashTable
 */
template <typename T>
const ProbeHashTable<T> & ProbeHashTable<T>::operator=(const ProbeHashTable<T> &rhs) {
}

/*
 *  Method: ProbeHashTable::ProbeHashTable()
 *   Descr: Destructor method for ProbeHashTable
 */
template <typename T>
ProbeHashTable<T>::~ProbeHashTable() {
}

/*
 *  Method: ProbeHashTable::at()
 *   Descr: Return number of items stored at index
 */
template <typename T>
int ProbeHashTable<T>::at(int index, vector<T> &contents)
{
    int dummy;

    return dummy;
}


/*
 *  Method: ProbeHashTable::dump()
 *   Descr: Print hashtable to console
 */
template <typename T>
void ProbeHashTable<T>::dump() {
    cout << "ProbeHashTable dump; size: " << m_length << " buckets" << endl;
    for (int i = 0; i < m_length; i++) {
        cout << "[" << i << "]: ";
        switch (m_table[i].m_flag) {
            case DELETED:
                cout << "DELETED" << endl;
                break;
            case EMPTY:
                cout << "EMPTY" << endl;
                break;
            case OCCUPIED:
                cout << m_table[i].m_data << " (" << this->hashFunc(m_table[i].m_data) << ")" << endl;
                break;
        }
    }
    cout << "Total items: " << m_size << "" << endl;
}


/*
 *  Method: ProbeHashTable::find()
 *   Descr: Return true if data is in m_table or false if not
 */
template <typename T>
bool ProbeHashTable<T>::find(const T &data)
{
    bool dummy;
    
    
    return dummy;
}


/*
 *  Method: ProbeHashTable::insert()
 *   Descr: Return true if item successfully inserted and false if not
 */
template <typename T>
bool ProbeHashTable<T>::insert(const T &data)
{
    if (++m_size == m_length)
        throw out_of_range("The hashtable is full");

    int index;
    locate(data,index);
//    return dummy;
}


/*
 *  Method: ProbeHashTable::remove()
 *   Descr: Return the removed item
 */
template <typename T>
T ProbeHashTable<T>::remove(const T &data, bool &found)
{
    T dummy;

    return dummy;
}

/*
 *  Method: ProbeHashTable::locate()
 *   Descr: Locate the item and store the index in a variable
 */
template<typename T>
bool ProbeHashTable<T>::locate(const T& data, int& index) {
    for (int i=index=this->hashFunc(data);m_table[index].m_data != data && m_table[index].m_flag == 1 && index!=i-1;index = ++index % 101)
    cout << "index: "<< index << "\ni: "<< i << "" << endl;
}

#endif // PROBEHASHTABLE_CPP